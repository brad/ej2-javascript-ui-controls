define(["require", "exports", "../../src/index", "../../src/document-editor/implementation/format/index"], function (require, exports, index_1, index_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    describe('Selection Format validation -1', function () {
        it('Selection table format validation', function () {
            console.log('Selection table format validation');
            var tableFormat = new index_1.SelectionTableFormat(undefined);
            expect(tableFormat.background).toBe(undefined);
            expect(tableFormat.tableAlignment).toBe(undefined);
            expect(tableFormat.leftIndent).toBe(0);
            expect(tableFormat.rightMargin).toBe(0);
            expect(tableFormat.leftMargin).toBe(0);
            expect(tableFormat.bottomMargin).toBe(0);
            expect(tableFormat.topMargin).toBe(0);
            tableFormat.bottomMargin = 7.2;
            tableFormat.preferredWidth = 12;
            expect(tableFormat.preferredWidth).toBe(12);
            tableFormat.preferredWidth = 12;
            tableFormat.topMargin = 7.2;
            tableFormat.preferredWidthType = 'Percent';
            expect(tableFormat.preferredWidthType).toBe('Percent');
            expect(tableFormat.table).toBe(undefined);
            expect(tableFormat.cellSpacing).toBe(0);
            tableFormat.preferredWidthType = 'Auto';
            tableFormat.preferredWidthType = 'Auto';
            tableFormat.destroy();
        });
        it('selection cell format validation', function () {
            console.log('selection cell format validation');
            var cellFormat = new index_1.SelectionCellFormat(undefined);
            cellFormat.preferredWidth = 14;
            cellFormat.preferredWidth = 14;
            expect(cellFormat.preferredWidth).toBe(14);
            expect(cellFormat.preferredWidthType).toBe(undefined);
            cellFormat.preferredWidthType = 'Auto';
            cellFormat.preferredWidthType = 'Auto';
            expect(function () { cellFormat.clearCellFormat(); }).not.toThrowError();
            cellFormat.leftMargin = 0;
            cellFormat.rightMargin = 0;
            cellFormat.bottomMargin = 0;
            cellFormat.topMargin = 0;
            cellFormat.background = "#000000";
            cellFormat.verticalAlignment = 'Top';
            var format = new index_2.WCellFormat(undefined);
            format.leftMargin = 0;
            format.rightMargin = 0;
            format.bottomMargin = 0;
            format.topMargin = 0;
            format.shading.backgroundColor = "#000000";
            format.verticalAlignment = 'Top';
            expect(function () { cellFormat.combineFormat(format); }).not.toThrowError();
            format.leftMargin = 1;
            format.rightMargin = 2;
            format.bottomMargin = 3;
            format.topMargin = 2;
            format.shading.backgroundColor = "#ffffff";
            format.verticalAlignment = 'Bottom';
            expect(function () { cellFormat.combineFormat(format); }).not.toThrowError();
            cellFormat.clearFormat();
            cellFormat.destroy();
        });
        it('selection row format validation', function () {
            console.log('selection row format validation');
            var rowFormat = new index_1.SelectionRowFormat(undefined);
            rowFormat.height = 12;
            rowFormat.allowBreakAcrossPages = true;
            rowFormat.isHeader = false;
            rowFormat.heightType = 'Exactly';
            var format = new index_2.WRowFormat(undefined);
            format.height = 12;
            format.allowBreakAcrossPages = false;
            format.isHeader = true;
            format.heightType = 'Exactly';
            rowFormat.combineFormat(format);
            expect(function () { rowFormat.clearRowFormat(); }).not.toThrowError();
            rowFormat.combineFormat(format);
            rowFormat = new index_1.SelectionRowFormat(undefined);
            format.height = 1;
            format.allowBreakAcrossPages = true;
            format.isHeader = false;
            format.heightType = 'AtLeast';
            expect(function () { rowFormat.combineFormat(format); }).not.toThrowError();
            rowFormat.heightType = 'AtLeast';
            format = new index_2.WRowFormat(undefined);
            format.height = 1;
            format.allowBreakAcrossPages = false;
            format.isHeader = true;
            format.heightType = 'Exactly';
            rowFormat.combineFormat(format);
            rowFormat.clearFormat();
            rowFormat.destroy();
        });
    });
    describe('Selection Format validation -2', function () {
        it('Selection Section Format Validation', function () {
            console.log('Selection Section Format Validation');
            var sectionFormat = new index_2.WSectionFormat(undefined);
            sectionFormat.pageHeight = 12;
            sectionFormat.pageWidth = 13;
            sectionFormat.differentFirstPage = true;
            sectionFormat.differentOddAndEvenPages = false;
            sectionFormat.headerDistance = 12;
            sectionFormat.footerDistance = 12;
            sectionFormat.leftMargin = 12;
            sectionFormat.rightMargin = 12;
            sectionFormat.bottomMargin = 12;
            sectionFormat.topMargin = 12;
            var selectionSection = new index_1.SelectionSectionFormat(undefined);
            selectionSection.headerDistance = 10;
            selectionSection.footerDistance = 10;
            selectionSection.combineFormat(sectionFormat);
            selectionSection.pageHeight = 1;
            selectionSection.pageWidth = 2;
            selectionSection.differentFirstPage = false;
            selectionSection.differentOddAndEvenPages = true;
            selectionSection.headerDistance = 1;
            selectionSection.footerDistance = 1;
            selectionSection.leftMargin = 1;
            selectionSection.rightMargin = 1;
            selectionSection.bottomMargin = 1;
            selectionSection.topMargin = 1;
            expect(function () { selectionSection.combineFormat(sectionFormat); }).not.toThrowError();
            selectionSection.clearFormat();
            selectionSection.destroy();
        });
        it('selection character format validation', function () {
            console.log('selection character format validation');
            var charFormat = new index_1.SelectionCharacterFormat(undefined);
            charFormat.baselineAlignment = 'Subscript';
            charFormat.underline = 'Double';
            charFormat.strikethrough = 'DoubleStrike';
            charFormat.highlightColor = 'Pink';
            var character = new index_2.WCharacterFormat(undefined);
            character.highlightColor = 'Yellow';
            expect(function () { charFormat.combineFormat(character); }).not.toThrowError();
            charFormat.clearFormat();
            charFormat.destroy();
        });
        it('selection Paragraph format validation', function () {
            console.log('selection Paragraph format validation');
            var selFormat = new index_1.SelectionParagraphFormat(undefined, undefined);
            expect(function () { selFormat.clearFormat(); }).not.toThrowError();
            selFormat.rightIndent = 1;
            selFormat.lineSpacingType = 'Exactly';
            var paraFormat = new index_2.WParagraphFormat(undefined);
            paraFormat.rightIndent = 14;
            paraFormat.lineSpacingType = 'AtLeast';
            paraFormat.listFormat.destroy();
            expect(function () { selFormat.combineFormat(paraFormat); }).not.toThrowError();
            selFormat.destroy();
        });
    });
    describe('Selection Format validation, Paragraph Format validation- 4', function () {
        it('Copy to Format method validation with undefined parameter', function () {
            console.log('Copy to Format method validation with undefined parameter');
            var selFormat = new index_1.SelectionParagraphFormat(undefined, undefined);
            var format = selFormat.copyToFormat(undefined);
            expect(format).toBe(undefined);
        });
        it('Copy to Format method validation with paragraph format value as undefined', function () {
            console.log('Copy to Format method validation with paragraph format value as undefined');
            var selFormat = new index_1.SelectionParagraphFormat(undefined, undefined);
            var paraFormat = new index_2.WParagraphFormat();
            selFormat.leftIndent = undefined;
            selFormat.afterSpacing = undefined;
            selFormat.beforeSpacing = undefined;
            selFormat.rightIndent = undefined;
            selFormat.textAlignment = undefined;
            selFormat.lineSpacing = undefined;
            selFormat.lineSpacingType = undefined;
            selFormat.firstLineIndent = undefined;
            selFormat.copyToFormat(paraFormat);
            expect(paraFormat.leftIndent).toBe(0);
        });
    });
});
